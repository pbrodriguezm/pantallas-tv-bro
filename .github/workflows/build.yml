name: Build & Sign TV Bro (Release)

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: gradle

      - name: Gradle perms
        run: chmod +x gradlew

      # Compila todas las variantes de release que tenga el módulo app
      - name: Build release
        run: ./gradlew :app:assembleRelease

      # Mostrar qué APKs se generaron (útil para verificar nombres/rutas)
      - name: List generated APKs
        run: |
          echo "===== APKs encontrados ====="
          find app/build/outputs/apk -type f -name "*release*.apk" -printf "%p\n" | sort -V || true

      # Keystore efímero (para no usar Secrets)
      - name: Generate ephemeral release keystore
        run: |
          keytool -genkeypair -v \
            -keystore release.jks \
            -storepass 123456 \
            -keypass 123456 \
            -alias release \
            -keyalg RSA -keysize 2048 -validity 10000 \
            -dname "CN=TVBro, OU=PRL, O=PRL, L=Arequipa, ST=Arequipa, C=PE"

      # Firma el universal si existe; si no, arm64; si no, el primero
      - name: Sign release APK(s)
        shell: bash
        run: |
          set -e
          BT="$ANDROID_HOME/build-tools/$(ls "$ANDROID_HOME/build-tools" | sort -V | tail -n1)"
          mapfile -t APKS < <(find app/build/outputs/apk -type f -name "*release*.apk" | sort -V)

          if [ ${#APKS[@]} -eq 0 ]; then
            echo "No se encontraron APKs de release"; exit 1
          fi

          # Elegir preferencia
          TARGET=""
          for a in "${APKS[@]}"; do [[ "$a" == *"universal"* ]] && TARGET="$a" && break; done
          if [ -z "$TARGET" ]; then
            for a in "${APKS[@]}"; do [[ "$a" == *"arm64-v8a"* ]] && TARGET="$a" && break; done
          fi
          [ -z "$TARGET" ] && TARGET="${APKS[0]}"

          echo "APK elegido para firmar: $TARGET"
          SIGNED="${TARGET%.apk}-signed.apk"
          cp "$TARGET" "$SIGNED"
          "$BT/apksigner" sign --ks release.jks --ks-pass pass:123456 --key-pass pass:123456 --ks-key-alias release "$SIGNED"
          "$BT/apksigner" verify "$SIGNED"

          echo "SIGNED_APK=$SIGNED" >> $GITHUB_ENV

      - name: Upload SIGNED APK
        uses: actions/upload-artifact@v4
        with:
          name: tvbro-release-signed
          path: ${{ env.SIGNED_APK }}
